% Nucleate Boiling Heat Transfer using Chen Correlation: Combustion Chamber
clear all
clc

% Material properties of the chamber jacket

E1                  = 1.97*(10^11);     % Modulus of elasticity of chamber jacket (Pa)
alpha1              = 1.12*(10^(-5));    % Thermal expansion coefficient of chamber jacket (1/K)
sig_ult1            = 1.170*(10^9);      % Ultimate strength of chamber jacket divided by factor of safety (Pa)
safe                = 1.5;              % Factor of safety

% Initialize chamber parameters

Dc              = .1205;                % Chamber diameter (m)
Dt              = .0604;                % Throat diameter (m)
De              = .12;                  % Nozzle exit diameter (m)
Ac              = (1/4)*pi*(Dc^2);      % Chamber cross-sectional area (m^2)
At              = (1/4)*pi*(Dt^2);      % Throat cross-sectional area (m^2)
Ae              = (1/4)*pi*(De^2);      % Nozzle exit cross-sectional area (m^2)
l_chamber       = .41635;               % Combustion chamber length (m)
rec             = 0.9;                  % Recovery factor
w_ch            = .0005;                % Width of channels (m)
h_ch            = .0025;                % Height of channels (m)
Ac_ch           = w_ch*h_ch;            % Cross-sectional area of channels (m^2)
Pw_ch           = 2*w_ch + 2*h_ch;      % Wetted perimeter of channels (m)
Dh_ch           = (4*Ac_ch)/Pw_ch;      % Hydraulic diameter of channels (m)
k_wall          = 390;                  % Thermal conductivity of chamber jacket (W/mK)
t_wall          = .001;                 % Chamber jacket thickness (m)
k_barr          = 1.7;                  % Thermal conductivity of thermal barrier coating (W/mK)
t_barr          = 0.000;                % Thickness of thermal barrier coating

% Initialize combustion product properties

gamma           = 1.2067;                                       % Ratio of specific heats
k_g             = .5106;                                        % Thermal conductivity (W/mK)
mu              = (8.5911*10^(-5));                             % Dynamic viscosity (Pa-s)
Pr              = .4701;                                        % Prandtl number
Cp              = 2794.2;                                       % Specific heat at constant pressure (J/kgK)
Pc              = (2.413*10^6);                                 % Chamber pressure (Pa)
Tc              = 2650.348;                                     % Adiabatic flame temperature of combustion products (K)
Mc              = 0.3;                                          % Mach number in combustion chamber
P0              = Pc*(1+(gamma-1)/2*Mc^2)^(gamma/(gamma-1));    % Total pressure (Pa)
T0              = Tc*(1+(gamma-1)/2*Mc^2);                      % Total temperature (K)
Tcool_in        = 300;                                          % Inlet coolant temperature(K)
Pcool_in        = 3.723*(10^(6));                               % Inlet pressure of coolant (Pa)
mdot_tot        = 4.2;                                          % Total mass flow rate of all propellants (kg/s)
Cstar           = (Pc*At)/mdot_tot;                             % c* efficiency term

% Get the wall radius and diameter profiles

elements        = 1000;                             % Number of elements
stepsize        = l_chamber/elements;               % Axial stepsize (m)
wall_profile    = get_profile(elements,l_chamber);  % Array of nozzle radius (m)
diameters       = 2*wall_profile;                   % Array of nozzle diameters (m)
position        = 0*ones(1,elements);               % Axial distance from nozzle exit of each element (m)
for i = 1:1:elements
    position(i) = i*stepsize;
end
circum_th       = 2*pi*(min(wall_profile)+t_wall);  % Circumference of nozzle throat
n_channels      = floor(circum_th/(w_ch + 0.001));  % Number of cooling channels
wall_widths     = (2*pi*wall_profile)/n_channels;   % Varying width geometry of the nozzle (m)

% Output figure of Mach Number with axial distance from nozzle exit
Mach            = getMa_numbers(diameters, gamma);  % Array of Mach numbers over length of nozzle
figure(2)
plot(position, Mach)
axis([0, position(length(position)), min(Mach), max(Mach)])
title('Nozzle Mach Number Profile')
xlabel('Axial distance (m)')
ylabel('Mach Number')

% Initialize combustion product free stream temperature

Tfree_all       = T0./(1 + (gamma-1)/2*Mach.^2);                    % Static free-stream temperature along nozzle profile (K)
Taw_all         = (T0-Tfree_all)*rec + Tfree_all;                   % Adiabatic wall temps (K)
P_all           = P0./(1 + (gamma-1)/2*Mach.^2).^(gamma/(gamma-1)); % Static pressure along nozzle profile (Pa)

% Array initializations

Tc_in_all       = 0*ones(1,elements);   % Empty station arrays
Pch_all         = 0*ones(1,elements);   % Regen channel pressure (Pa)
Twg_all         = 0*ones(1,elements);   % Hot side wall temps (K)
Twc_all         = 0*ones(1,elements);   % Coolant side wall temps (K)
qdot_all        = 0*ones(1,elements);   % Heat fluxes (W/m^2)
Tb_all          = 0*ones(1,elements);   % Coolant temps (K)
hDB_all         = 0*ones(1,elements);   % Coolant side heat transfer coeff (W/m^2K)
hNB_all         = 0*ones(1,elements);   % Hot side heat transfer coeff (W/m^2K)
Tw_copp_all     = 0*ones(1,elements);   % Temperature of copper wall
delta_stats     = 0*ones(1,elements);   % Record required number of iterations at each station
del_t_crit      = 0*ones(1,elements);   % Critical wall superheat
inter_temps     = 250:1:500;            % Initialize temperature array for interpolation purposes

Psat_mat = [0.020424,... % Saturation pressure matrix (psia)
0.022439,...
0.024631,...
0.027015,...
0.029606,...
0.032418,...
0.035468,...
0.038775,...
0.042356,...
0.046232,...
0.050423,...
0.054952,...
0.059843,...
0.065120,...
0.070810,...
0.076941,...
0.083541,...
0.090643,...
0.098279,...
0.10648,...
0.11529,...
0.12474,...
0.13488,...
0.14574,...
0.15737,...
0.16981,...
0.18312,...
0.19734,...
0.21254,...
0.22876,...
0.24606,...
0.26451,...
0.28416,...
0.30509,...
0.32737,...
0.35106,...
0.37625,...
0.40301,...
0.43143,...
0.46159,...
0.49357,...
0.52748,...
0.56341,...
0.60145,...
0.64172,...
0.68431,...
0.72934,...
0.77694,...
0.82720,...
0.88027,...
0.93626,...
0.99531,...
1.0576,...
1.1232,...
1.1922,...
1.2649,...
1.3414,...
1.4219,...
1.5065,...
1.5953,...
1.6887,...
1.7866,...
1.8895,...
1.9973,...
2.1104,...
2.2288,...
2.3529,...
2.4829,...
2.6189,...
2.7613,...
2.9101,...
3.0657,...
3.2283,...
3.3982,...
3.5756,...
3.7607,...
3.9539,...
4.1553,...
4.3654,...
4.5844,...
4.8125,...
5.0501,...
5.2974,...
5.5549,...
5.8227,...
6.1013,...
6.3909,...
6.6919,...
7.0046,...
7.3295,...
7.6667,...
8.0168,...
8.3801,...
8.7569,...
9.1476,...
9.5526,...
9.9724,...
10.407,...
10.858,...
11.324,...
11.807,...
12.306,...
12.823,...
13.357,...
13.910,...
14.481,...
15.071,...
15.680,...
16.310,...
16.960,...
17.631,...
18.323,...
19.037,...
19.774,...
20.533,...
21.316,...
22.122,...
22.954,...
23.810,...
24.691,...
25.599,...
26.533,...
27.495,...
28.484,...
29.501,...
30.547,...
31.623,...
32.728,...
33.864,...
35.031,...
36.230,...
37.460,...
38.724,...
40.021,...
41.353,...
42.719,...
44.120,...
45.557,...
47.030,...
48.541,...
50.089,...
51.676,...
53.301,...
54.966,...
56.672,...
58.418,...
60.205,...
62.035,...
63.907,...
65.823,...
67.783,...
69.787,...
71.837,...
73.933,...
76.075,...
78.264,...
80.501,...
82.787,...
85.122,...
87.507,...
89.942,...
92.428,...
94.966,...
97.556,...
100.20,...
102.90,...
105.65,...
108.45,...
111.32,...
114.23,...
117.21,...
120.24,...
123.33,...
126.48,...
129.69,...
132.96,...
136.29,...
139.68,...
143.13,...
146.65,...
150.23,...
153.87,...
157.58,...
161.35,...
165.19,...
169.09,...
173.06,...
177.10,...
181.20,...
185.38,...
189.62,...
193.94,...
198.32,...
202.78,...
207.30,...
211.90,...
216.58,...
221.32,...
226.14,...
231.04,...
236.01,...
241.05,...
246.17,...
251.37,...
256.65,...
262.00,...
267.43,...
272.94,...
278.53,...
284.21,...
289.96,...
295.79,...
301.71,...
307.70,...
313.79,...
319.95,...
326.20,...
332.53,...
338.95,...
345.46,...
352.05,...
358.73,...
365.49,...
372.35,...
379.29,...
386.33,...
393.45,...
400.66,...
407.97,...
415.37,...
422.86,...
430.44,...
438.12,...
445.90,...
453.77,...
461.73,...
469.80,...
477.96,...
486.22,...
494.58,...
503.05,...
511.61,...
520.28,...
529.06,...
537.94,...
546.92,...
556.02,...
565.23,...
574.55,...
583.99,...
593.55];

Psat_matPa = Psat_mat*6894.76; % Saturation pressure matrix (Pa)
 
rho_inter = [818.49,... % Initialize array density values with respect to temperature for interpolation
817.85,...
817.20,...
816.56,...
815.91,...
815.26,...
814.61,...
813.96,...
813.31,...
812.65,...
811.99,...
811.34,...
810.68,...
810.01,...
809.35,...
808.68,...
808.01,...
807.34,...
806.66,...
805.98,...
805.30,...
804.62,...
803.93,...
803.24,...
802.55,...
801.85,...
801.15,...
800.45,...
799.75,...
799.04,...
798.32,...
797.61,...
796.89,...
796.17,...
795.44,...
794.71,...
793.97,...
793.24,...
792.49,...
791.75,...
791.00,...
790.25,...
789.49,...
788.73,...
787.96,...
787.19,...
786.42,...
785.64,...
784.86,...
784.07,...
783.28,...
782.49,...
781.69,...
780.89,...
780.08,...
779.27,...
778.45,...
777.63,...
776.80,...
775.97,...
775.14,...
774.30,...
773.45,...
772.61,...
771.75,...
770.90,...
770.03,...
769.17,...
768.29,...
767.42,...
766.54,...
765.65,...
764.76,...
763.86,...
762.96,...
762.05,...
761.14,...
760.23,...
759.30,...
758.38,...
757.45,...
756.51,...
755.57,...
754.62,...
753.67,...
752.71,...
751.75,...
750.78,...
749.81,...
748.83,...
747.84,...
746.85,...
745.86,...
744.86,...
743.85,...
742.84,...
741.82,...
740.80,...
739.77,...
738.73,...
737.69,...
736.65,...
735.60,...
734.54,...
733.47,...
732.40,...
731.33,...
730.25,...
729.16,...
728.07,...
726.97,...
725.86,...
724.75,...
723.63,...
722.51,...
721.38,...
720.24,...
719.09,...
717.94,...
716.79,...
715.62,...
714.45,...
713.28,...
712.10,...
710.91,...
709.71,...
708.51,...
707.30,...
706.08,...
704.85,...
703.62,...
702.38,...
701.14,...
699.89,...
698.62,...
697.36,...
696.08,...
694.80,...
693.51,...
692.21,...
690.91,...
689.59,...
688.27,...
686.94,...
685.60,...
684.26,...
682.91,...
681.54,...
680.17,...
678.80,...
677.41,...
676.01,...
674.61,...
673.19,...
671.77,...
670.34,...
668.90,...
667.45,...
665.99,...
664.52,...
663.04,...
661.56,...
660.06,...
658.55,...
657.03,...
655.50,...
653.96,...
652.41,...
650.85,...
649.28,...
647.70,...
646.11,...
644.50,...
642.88,...
641.26,...
639.62,...
637.96,...
636.30,...
634.62,...
632.93,...
631.22,...
629.50,...
627.77,...
626.03,...
624.27,...
622.49,...
620.70,...
618.90,...
617.08,...
615.24,...
613.39,...
611.52,...
609.63,...
607.73,...
605.81,...
603.87,...
601.91,...
599.93,...
597.93,...
595.91,...
593.87,...
591.81,...
589.72,...
587.61,...
585.48,...
583.32,...
581.14,...
578.93,...
576.69,...
574.43,...
572.13,...
569.80,...
567.44,...
565.05,...
562.62,...
560.16,...
557.66,...
555.11,...
552.53,...
549.90,...
547.22,...
544.50,...
541.72,...
538.89,...
536.00,...
533.05,...
530.03,...
526.94,...
523.77,...
520.52,...
517.18,...
513.75,...
510.21,...
506.55,...
502.77,...
498.85,...
494.77,...
490.52,...
486.07,...
481.39,...
476.44,...
471.19,...
465.56,...
459.48,...
452.82,...
92.299,...
90.315,...
88.551,...
86.962,...
85.514,...
84.183];

Cp_inter = [2170.2,... % Initialize interpolation array for specific heat at constant pressure
2185.3,...
2200.3,...
2215.3,...
2230.3,...
2245.3,...
2260.2,...
2275.0,...
2289.8,...
2304.4,...
2319.0,...
2333.5,...
2347.9,...
2362.2,...
2376.3,...
2390.4,...
2404.3,...
2418.1,...
2431.7,...
2445.3,...
2458.7,...
2472.0,...
2485.1,...
2498.1,...
2511.0,...
2523.7,...
2536.3,...
2548.8,...
2561.1,...
2573.3,...
2585.4,...
2597.3,...
2609.1,...
2620.8,...
2632.3,...
2643.7,...
2655.0,...
2666.2,...
2677.2,...
2688.1,...
2698.9,...
2709.6,...
2720.1,...
2730.6,...
2740.9,...
2751.1,...
2761.2,...
2771.2,...
2781.1,...
2790.8,...
2800.5,...
2810.1,...
2819.6,...
2828.9,...
2838.2,...
2847.4,...
2856.5,...
2865.5,...
2874.5,...
2883.3,...
2892.0,...
2900.7,...
2909.3,...
2917.8,...
2926.3,...
2934.6,...
2942.9,...
2951.1,...
2959.3,...
2967.3,...
2975.3,...
2983.3,...
2991.2,...
2999.0,...
3006.8,...
3014.5,...
3022.1,...
3029.7,...
3037.2,...
3044.7,...
3052.2,...
3059.5,...
3066.9,...
3074.2,...
3081.4,...
3088.6,...
3095.8,...
3102.9,...
3109.9,...
3117.0,...
3124.0,...
3130.9,...
3137.9,...
3144.7,...
3151.6,...
3158.4,...
3165.2,...
3172.0,...
3178.7,...
3185.4,...
3192.1,...
3198.8,...
3205.4,...
3212.0,...
3218.6,...
3225.1,...
3231.7,...
3238.2,...
3244.7,...
3251.2,...
3257.7,...
3264.1,...
3270.6,...
3277.0,...
3283.4,...
3289.8,...
3296.2,...
3302.6,...
3309.0,...
3315.3,...
3321.7,...
3328.0,...
3334.4,...
3340.7,...
3347.0,...
3353.4,...
3359.7,...
3366.0,...
3372.3,...
3378.7,...
3385.0,...
3391.3,...
3397.7,...
3404.0,...
3410.4,...
3416.7,...
3423.1,...
3429.4,...
3435.8,...
3442.2,...
3448.6,...
3455.0,...
3461.4,...
3467.9,...
3474.3,...
3480.8,...
3487.3,...
3493.8,...
3500.3,...
3506.9,...
3513.4,...
3520.0,...
3526.7,...
3533.3,...
3540.0,...
3546.7,...
3553.5,...
3560.2,...
3567.1,...
3573.9,...
3580.8,...
3587.7,...
3594.7,...
3601.7,...
3608.8,...
3615.9,...
3623.1,...
3630.3,...
3637.6,...
3644.9,...
3652.3,...
3659.8,...
3667.3,...
3674.9,...
3682.6,...
3690.3,...
3698.1,...
3706.1,...
3714.1,...
3722.2,...
3730.4,...
3738.7,...
3747.1,...
3755.6,...
3764.2,...
3773.0,...
3781.9,...
3790.9,...
3800.0,...
3809.4,...
3818.8,...
3828.5,...
3838.3,...
3848.3,...
3858.5,...
3868.9,...
3879.5,...
3890.3,...
3901.4,...
3912.7,...
3924.3,...
3936.2,...
3948.4,...
3960.9,...
3973.7,...
3986.9,...
4000.5,...
4014.5,...
4028.9,...
4043.8,...
4059.2,...
4075.1,...
4091.6,...
4108.7,...
4126.5,...
4145.0,...
4164.3,...
4184.4,...
4205.4,...
4227.4,...
4250.5,...
4274.7,...
4300.3,...
4327.2,...
4355.8,...
4386.1,...
4418.3,...
4452.7,...
4489.5,...
4529.0,...
4571.7,...
4617.9,...
4668.1,...
4723.1,...
4783.5,...
4850.4,...
4925.0,...
5008.9,...
5104.2,...
5213.6,...
5340.9,...
5491.6,...
5673.4,...
5898.7,...
6187.1,...
6345.4,...
5949.0,...
5634.7,...
5378.0,...
5163.2,...
4980.2];

% Boundary conditions

Tc_in_all(1)    = Tcool_in; % Define coolant inlet temp (K)
Pch_all(1)      = Pcool_in; % Coolant inlet pressure (Pa)
s = 1;
iter_e = 1;

% Step through cooling channels and calculate everything

for i = 1:1:elements
    
    if (i == 1)
        Twg_init    = T0*0.8; % Initial guess for hot side wall temperature (K)
        Twg         = Twg_init;
    else
        Twg         = Twg_all(i-1); % If not the first station, use the calculated wall temp from previous station (K)
    end
    
    D           = diameters(i); % Diameter at current position (m)
    w_fin       = wall_widths(i) - w_ch; % Width of fin/rib at current position (m)
    Te          = Tfree_all(i); % Free stream temperature at current station (K)
    Taw         = Taw_all(i); % Adiabatic wall temperature at current station (K)
    
    Twc         = [0]; % Initialize array for cool side wall temperature (K)
    qdot        = [0]; % Initialize array for heat flux (W)
    Tout        = [0]; % Initialize array for coolant temperature at element outlet (K)
    Tb          = [0]; % Initialize array for coolant bulk temperature (K)
    deltas      = [0]; % Initialize array for relative difference between consecutive iterations
    
    delta       = 1; % Initialize error to be greater than eps
    eps         = 1e-4; % Convergence tolerance
    j           = 1; % Iteration counter
    
    while delta > eps
        
        % Initialize coolant properties
        
        x               = 0.0;                      % Coolant flow qulaity
        Tsat_0          = 354.3;                    % Atmospheric saturation temperature of coolant (K)
        i_lg            = 257060;                   % Specific heat of vaporization (J/kg)
        rho_lsat        = 451.18;                   % Liquid density at saturation conditions (kg/m^3)
        Patm            = 101325;                   % Atmospheric pressure (Pa)
        Pgauge          = Pcool_in - Patm;          % Gauge pressure of coolant (Pa)
        Mbar            = 60.09502;                 % Molar mass of coolant (kg/kmol)
        Rbar            = 8314.4;                   % Universal gas constant (J/molK)
        R               = Rbar/Mbar;                % Specific gas constant (J/kgK)
        Tsat            = 494.23;                   % Saturation temperature at coolant inlet pressure (K)
        rho_g           = Pcool_in/(R*Tsat);        % Vapor phase density at coolant inlet pressure and saturation temperature (kg/m^3))
        v_lgsat         = (1/rho_g) - (1/rho_lsat); % Difference in specific volumes of liquid and vapor phases at saturation conditions (1/m^3)
        Cp_lsat         = 6265.8;                   % Specific heat at constant pressure of the coolant at saturation conditions (J/kgK)
        kl              = .122;                     % Thermal conductivity of coolant (W/mK)
        if (i == 1)
            Cpl             = interp1(inter_temps, Cp_inter, Tcool_in);
        else
            if (Tb_all(i-1) < Tsat)
                Cpl             = interp1(inter_temps, Cp_inter, Tb_all(i-1));
            else
                Cpl             = Cp_lsat;
            end
        end
        mu_l            = .000528;                  % Dynamic viscosity of coolant (Pa-s)
        Tcrit           = 508.7;                    % Critical temperature of the coolant (K)
        ksigma          = (2.1*10^(-7));            % k-sigma constant
        V_m             = Mbar/rho_g;               % Molar volume of the coolant
        v_g             = 1/rho_g;                  % Specific volume of vapor phase

        % Initialize coolant flow parameters
        
        mdot            = 1.91;                     % Total mass flow rate of coolant (kg/s)
        mdot_ch         = mdot/n_channels;          % Mass flow rate of coolant in each channel (kg/s)
        G               = mdot_ch/Ac_ch;            % Mass flux of coolant (kg/sm^2)
        Re              = (G*(1-x)*Dh_ch)/mu_l;     % Reynolds number of coolant
        Prandtl         = (mu_l*Cpl)/kl;            % Prandtl number of coolant
        
        % Calculate station conditions
        
        A_stat          = pi*(wall_profile(i)^2); % Nozzle cross-sectional area of current station (m^2)
        h_gcoeff        = (.026/(Dt^(.2)))*((Pc/Cstar)^(.8))*Cp*(mu^(.2))*(1/(Pr^(0.6)))*((At/A_stat)^(0.9)); % Part of the Bartz convection coefficient term
        sigma           = 1/((((1/2)*(Twg/Te)*(1 + ((gamma - 1)/2)*((Mach(i))^2)) + (1/2))^(0.68))*((1 + ((gamma - 1)/2)*((Mach(i))^2))^(0.12))); % Sigma portion of the Bartz coefficient term
        qdot(j)         = h_gcoeff*sigma*(Taw - Twg); % Heat flux at current station using Bartz (W/m^2)
        Aw              = stepsize*(w_ch + w_fin); % Hot side heat transfer area (m^2)
        Tout(j)         = (qdot(j)*Aw)/(mdot_ch*Cpl) + Tc_in_all(i); % Coolant temperature at outlet of current station (K)
        Tb(j)           = (Tc_in_all(i) + Tout(j))/2; % Coolant bulk temperature at current station (K)
        if (Tb(j) < Tsat)
            rho_l           = interp1(inter_temps, rho_inter, Tb(j));
            v_lg            = (1/rho_g) - (1/rho_l); % Difference in specific volumes of liquid and vapor phases (1/m^3)
        else
            Tb(j)           = Tsat;
            rho_l           = rho_lsat;
            v_lg            = v_lgsat;
        end
        sigma2          = (ksigma*(Tcrit - Tb(j)))/(V_m^(2/3)); % Surface tension of vapor bubbles (N/m)
        hl              = (kl/Dh_ch)*(.023)*(Re^(.8))*(Prandtl^(.4)); % Dittus-Boelter liquid forced convection coefficient
        F               = (((1-x)^(1.5)) + 1.9*(x^(.6))*((rho_l/rho_g)^(.35)))^(1.1); % Chen's forced convection F factor
        hfz_coeff       = .00122*(((kl^(.79))*(Cpl^(.45))*(rho_l^(.49)))/((mu_l^(.29))*(i_lg^(.24))*(rho_g^(.24)))); % First part of nucleate boiling heat transfer coefficient term
        S               = 1/((1+((2.53*10^(-6))*(Re*(F^(1.25))))^(1.17))); % Chen's nucleate boiling suppression factor
        deltc           = sqrt((8*sigma2*Tsat*v_g*qdot(j))/(i_lg*kl)); % Critical wall superheat for current iteration
        
        
        % Iterate to solve for the cold wall temperature that corresponds
        % to the qdot of current guess
        
        Twc1            = 500; % First cold wall temperature guess (K)
        Psat_wall       = interp1(inter_temps, Psat_matPa, Twc1); % Saturation pressure at cool side wall temperature
        delta_P         = Psat_wall - Pcool_in; % Difference between saturation pressure at cool side wall temperature and coolant static pressure
        hNB             = S*hfz_coeff*(1/(sigma2^(0.5)))*((Twc1 - Tsat)^.24)*(delta_P^.75); % Chen's nucleate boiling heat transfer coefficient
        mDB             = sqrt((2*F*hl)/(k_wall*w_fin)); % M term for the fin effect of the Dittus Boelter convection coefficient
        mNB             = sqrt((2*hNB)/(k_wall*w_fin)); % M term for the fin effect of Chen's nucleate boiling convection coefficient
        fineffDB        = sqrt((2*k_wall)/(F*hl*w_fin))*tanh(mDB*h_ch); % Fin effect for Dittus Boelter
        fineffNB        = sqrt((2*k_wall)/(hNB*w_fin))*tanh(mNB*h_ch); % Fin effect for nucleate boiling
        AcDB            = stepsize*(w_ch + w_fin*fineffDB); % Heat transfer area for Dittus Boelter
        AcNB            = stepsize*(w_ch + w_fin*fineffNB); % Heat transfer area for nucleate boiling
        if (Twc1 < Tsat)
                hNB             = 0;
                mNB             = 0; % M term for the fin effect of Chen's nucleate boiling convection coefficient
                fineffNB        = 0; % Fin effect for nucleate boiling
                AcNB            = 0; % Heat transfer area for nucleate boiling
        end
        q1              = F*hl*(AcDB/Aw)*(Twc1 - Tb(j)) + hNB*(AcNB/Aw)*(Twc1 - Tsat); % Calculated heat flux for current guess
        Twc2            = Twc1 - 1; % Second cold wall temperature guess (K)
        error           = 1; % Initialize error term for iterative procedure
        iter            = 0; % Initialize iteration counter
        
        while abs(error) > .001
            
            Psat_wall       = interp1(inter_temps, Psat_matPa, Twc2); % Saturation pressure at cool side wall temperature
            delta_P         = Psat_wall - Pcool_in; % Difference between saturation pressure at cool side wall temperature and coolant static pressure
            hNB             = S*hfz_coeff*(1/(sigma2^(0.5)))*((Twc2 - Tsat)^.24)*(delta_P^.75); % Chen's nucleate boiling heat transfer coefficient
            mNB             = sqrt((2*hNB)/(k_wall*w_fin)); % M term for the fin effect of Chen's nucleate boiling convection coefficient
            fineffNB        = sqrt((2*k_wall)/(hNB*w_fin))*tanh(mNB*h_ch); % Fin effect for nucleate boiling
            AcNB            = stepsize*(w_ch + w_fin*fineffNB); % Heat transfer area for nucleate boiling
            if (Twc2 < Tsat)
                hNB             = 0;
                mNB             = 0; % M term for the fin effect of Chen's nucleate boiling convection coefficient
                fineffNB        = 0; % Fin effect for nucleate boiling
                AcNB            = 0; % Heat transfer area for nucleate boiling
            end
            F;
            hl;
            AcDB;
            Aw;
            Twc2;
            Tb(j);
            qdot;
            q2              = F*hl*(AcDB/Aw)*(Twc2 - Tb(j)) + hNB*(AcNB/Aw)*(Twc2 - Tsat); % Calculated heat flux for current guess
            slope           = (q2 - q1)/(Twc2 - Twc1); % Slope term for calculation of next guess
            error           = qdot(j) - q2; % Heat flux error term
            Twc_new         = 0.5*(error/slope) + Twc2; % Calculate guess for next iteration
            
            % Update terms for next iteration
            if (abs(error) > .001)
                q1 = q2;
                Tb;
                Twc1 = Twc2;
                Twc2 = Twc_new;
            end
            
            % Increase iteration number by one
            iter = iter + 1;
            
            % If the loop has run for more than 100 iterations, exit loop
            % and print error
            if (iter > 100)
                err(iter_e) = error;
                error
                error = 0;
                iter_e = iter_e + 1;
            end
            
        end
        
        Twc(j)              = Twc2; % Update cool wall temperature
        
        % Compare calculated hot side wall temperature to guess

        Twg_calc            = Twc(j) + (qdot(j)*((t_wall/k_wall) + (t_barr/k_barr))); % Calculated hot wall temperature
        Twg_new             = (2*Twg + Twg_calc)/3;
        deltas(j)           = abs((Twg_new - Twg))/Twg; % Error term array
        delta               = deltas(j); % Error term
        
%         if (j > 5)
%             break
%         end
        
        if (delta > eps)
            Twg = Twg_new;
        end
        
        if (j > 100)
            de(s) = delta;
            delta
            delta = 0;
            s = s + 1;
        end
        
        j = j + 1;
        
    end
    
    % record converged solutions 
    Twg_all(i)              = Twg;
    Twc_all(i)              = Twc(j-1);
    qdot_all(i)             = qdot(j-1);
    Tb_all(i)               = Tb(j-1);
    hNB_all(i)              = hNB;
    hDB_all(i)              = F*hl;
    del_t_crit(i)           = deltc;
    Tw_copp_all(i)          = Twg_all(i) - qdot_all(i)*(t_barr/k_barr);
    
    if (i < elements)
        Tc_in_all(i+1)      = Tout(j-1); % Update inlet coolant temperature of next station to be outlet coolant temperature of current station
        Pch_all(i+1)        = Pch_all(i); % Update coolant inlet pressure
    end
    
    delta_stats(i)          = length(deltas); % record number of req'd iterations at this station
    
%     if (Twg_all(i) < 0)
%         break
%     end

%     i
%     if (i > 249)
%         break
%     end
    
end

% Give a plus or minus 20 percent spread to hot side wall temperature due
% to uncertainty

Twg_up_20           = 1.2*Twg_all;
Twg_down_20         = .8*Twg_all;

% Caculate delta Ts

DT                  = Tw_copp_all - Twc_all;

% Calculate Wall stresses

%E1                  = 1.92*(10^11);
%alpha1              = 1.05*(10^(-5));
%sig_ult1            = 1.52*(10^9);

%E1                  = 199.94*(10^9); % Modulus of Elasticity for chamber shell material
%alpha1              = 1.3*(10^(-5)); % Coeffecient of thermal expansion for chamber shell material
poisson             = 0.31; % Poisson ratio (assumed constant for metals)
%E1                  = 199*(10^9); % Modulus of Elasticity for chamber shell material
E2                  = 122*(10^9); % Modulus of Elasticity for chamber liner material
%alpha1              = 1.87*(10^(-5)); % Coeffecient of thermal expansion for chamber shell material
alpha2              = 1.68*(10^(-5)); % Coeffecient of thermal expansion for chamber liner material
T_ass               = 297; % Temperature of assembly (K)
%sig_ult1            = 581*(10^6); % Ultimate strength of chamber shell material (Pa)
%sig_ult1            = 1375*(10^6); % Ultimate strength of chamber shell material (Pa)
%S                   = 1.5; % Factor of safety
sig1                = sig_ult1/safe; % Design stress for chamber shell
sig_2h              = -(E2/E1)*sig1 + ((alpha2*E2)/(1 - poisson))*(Tw_copp_all - Twc_all) - ((alpha1*E2)/(1 - poisson))*Tb_all...
                        + ((alpha2*E2)/(1 - poisson))*Twc_all - ((alpha2 - alpha1)*E2*(T_ass))/(1 - poisson); % Hot side wall stress
%sig_2h              = -(E2/E1)*sig1 + ((alpha2*E2)/(1 - poisson))*((Twc_all - Tb_all) + (10))...
%                        + ((alpha1)*E2*(T_ass - Tb_all))/(1 - poisson); % Hot side wall stress

term1               = ((alpha2*E2)/(1 - poisson))*(Twg_all - Twc_all);
term2               = -((alpha1*E2)/(1 - poisson))*Tb_all;
term3               = ((alpha2*E2)/(1 - poisson))*Twc_all;

sig_buck            = ((pi^2)/3)*((t_wall/w_ch)^2)*E2
stress_max          = max(abs(sig_2h))
copper_max          = max(Tw_copp_all)
barrier_max         = max(Twg_all)
coolant_max         = max(Tb_all)

% Create figures

figure(3)
plot(position, Twg_all, position, Twg_up_20, position, Twg_down_20)
axis([0, position(length(position)), min(Twg_down_20), max(Twg_up_20)])
title('Hot-side Wall Temperature Profile')
xlabel('Axial Distance From Coolant Inlet (m)')
ylabel('Hot-side Wall Temperature (K)')

figure(4)
plot(position, qdot_all)
axis([0, position(length(position)), min(qdot_all), max(qdot_all)])
title('Heat Flux Axial Profile')
xlabel('Axial Distance From Coolant Inlet (m)')
ylabel('Heat Flux (W/m^2)')

figure(5)
plot(position, Twc_all)
axis([0, position(length(position)), min(Twc_all), max(Twc_all)])
title('Cool-side Wall Temperature Profile')
xlabel('Axial Distance From Coolant Inlet (m)')
ylabel('Cool-side Wall Temperature (K)')

figure(6)
plot(position, Tb_all)
axis([0, position(length(position)), min(Tb_all), max(Tb_all)])
title('Coolant Bulk Temperature Profile')
xlabel('Axial Distance From Coolant Inlet (m)')
ylabel('Coolant Bulk Temperature (K)')

% figure(7)
% plot(position, hNB_all)
% axis([0, position(length(position)), min(hNB_all), max(hNB_all)])
% title('Nucleate Boiling Heat Transfer Coefficient Profile')
% xlabel('Axial Distance From Coolant Inlet (m)')
% ylabel('Nucleate Boiling Heat Transfer Coefficient')

figure(8)
plot(position, Tw_copp_all)
axis([0, position(length(position)), min(Tw_copp_all), max(Tw_copp_all)])
title('Hot Side Copper Temperature')
xlabel('Axial Distance From Coolant Inlet (m)')
ylabel('Temperature (K)')

figure(9)
plot(position, DT)
axis([0, position(length(position)), min(DT), max(DT)])
title('Temperature Differential Across Chamber Liner')
xlabel('Axial Distance From Coolant Inlet (m)')
ylabel('Temperature Differential (K)')

figure(10)
plot(position, sig_2h)
axis([0, position(length(position)), min(sig_2h), max(sig_2h)])
title('Stress in Chamber Walls')
xlabel('Axial Distance From Coolant Inlet (m)')
ylabel('Wall Stress (Pa)')

% figure(11)
% plot(position, term1)
% axis([0, position(length(position)), min(term1), max(term1)])
% title('Term 1')
% xlabel('Axial Distance From Coolant Inlet (m)')
% ylabel('Wall Stress (Pa)')
% 
% figure(12)
% plot(position, term2)
% axis([0, position(length(position)), min(term2), max(term2)])
% title('Term 2')
% xlabel('Axial Distance From Coolant Inlet (m)')
% ylabel('Wall Stress (Pa)')
% 
% figure(13)
% plot(position, term3)
% axis([0, position(length(position)), min(term3), max(term3)])
% title('Term 3')
% xlabel('Axial Distance From Coolant Inlet (m)')
% ylabel('Wall Stress (Pa)')





























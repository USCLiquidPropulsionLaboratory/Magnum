from Tkinter import *
import Tkinter as tk
import RPi.GPIO as GPIO
import time
import tkFont
import smbus
import datetime
import spidev
from time import sleep

GPIO.setmode(GPIO.BCM)
GPIO.setup(4,GPIO.OUT)
GPIO.output(4, GPIO.LOW)
GPIO.setup(17,GPIO.OUT)
GPIO.output(17, GPIO.LOW)
GPIO.setup(27,GPIO.OUT)
GPIO.output(27, GPIO.LOW)
GPIO.setup(22,GPIO.OUT)
GPIO.output(22, GPIO.LOW)

#set colors
BLACK = '#000000'
RED = '#9b0000'
BRIGHTRED = '#ff0000'
GREEN = '#009b00'
BRIGHTGREEN = '#0000ff'

#Solenoid indicators
ON = 1
OFF = 0
LIGHTONOFF = [RED, BRIGHTRED]
colorBackground = BLACK
ColorButton = RED
lightStatus = [OFF,OFF,OFF,OFF,OFF]
light = []

BUTTON_SIZE = 10
NUM_BUTTON = 4
MARGIN = 1
WINDOW_W = MARGIN+ ((BUTTON_SIZE+MARGIN))
WINDOW_H = (2*MARGIN)+BUTTON_SIZE

print WINDOW_W
print WINDOW_H

bus = smbus.SMBus(1)
address = 0x48

#Timer
state = False
root = Tk()
timer = [0,0,0]
pattern = '{0:02d}:{1:02d}:{2:02}'

celcius = [0,0]
root.wm_title('Temp on GUI')
TPattern = '{0:03d}'

x = 0

#Print Date and Time
f = open('Tempdate.txt','a')
now = datetime.datetime.now()
timestamp = now.strftime("%Y/%m/%d %H:%M")
outstring = str(timestamp) + "\n"
print outstring
f.write(outstring)
f.close()

spi = spidev.SpiDev()
spi.open(0,0)
channel1 = 0
channel2 = 1
channel3 = 2
channel4 = 3
channel5 = 4
channel6 = 5
channel7 = 6
channel8 = 7

#Servo 1
GPIO.setup(18,GPIO.OUT)
pwm1 = GPIO.PWM(18, 100)
pwm1.start(5)

#Servo 2
GPIO.setup(25,GPIO.OUT)
pwm2 = GPIO.PWM(25, 100)
pwm2.start(5)

##Timer----------------------------------------------------------------------
def Time():
    if(state):
        global timer, timeString
        timer[2] += 1
        if (timer[2] >= 92):
            timer[2] = 0
            timer[1] += 1
        if (timer[1] >= 60):
            timer[0] += 1
            timer[1] = 0
        timeString = pattern.format(timer[0], timer[1], timer[2])
        timeText.configure(text=timeString)
    root.after(10, Time) ## Updates every __ milliseconds

## Temperature Measurements--------------------------------------------------
def temperature1():
    global channel1
    if((channel1>7) or (channel1<0)):
        return -1
    r = spi.xfer([1, (8+channel1) << 4, 0])
    adcOut = ((r[1]&3) << 8) + r[2]
    if adcOut > 10:
        adcOut = TPattern.format(adcOut)
        return adcOut
    else:
        adcOut = 0
        adcOut = TPattern.format(adcOut)
        return adcOut

def temperature2():
    global channel2
    if((channel2>7) or (channel2<0)):
        return -1
    r = spi.xfer([1, (8+channel2) << 4, 0])
    adcOut = ((r[1]&3) << 8) + r[2]
    adcOut = TPattern.format(adcOut)
    if adcOut > 10:
        return adcOut
    else:
        return 0

def temperature3():
    global channel3
    if((channel3>7) or (channel3<0)):
        return -1
    r = spi.xfer([1, (8+channel3) << 4, 0])
    adcOut = ((r[1]&3) << 8) + r[2]
    adcOut = TPattern.format(adcOut)
    if adcOut > 10:
        return adcOut
    else:
        return 0

def temperature4():
    global channel4
    if((channel4>7) or (channel4<0)):
        return -1
    r = spi.xfer([1, (8+channel4) << 4, 0])
    adcOut = ((r[1]&3) << 8) + r[2]
    adcOut = TPattern.format(adcOut)
    if adcOut > 10:
        return adcOut
    else:
        return 0

def temperature5():
    global channel5
    if((channel5>7) or (channel5<0)):
        return -1
    r = spi.xfer([1, (8+channel5) << 4, 0])
    adcOut = ((r[1]&3) << 8) + r[2]
    adcOut = TPattern.format(adcOut)
    if adcOut > 10:
        return adcOut
    else:
        return 0

def temperature6():
    global channel6
    if((channel6>7) or (channel6<0)):
        return -1
    r = spi.xfer([1, (8+channel6) << 4, 0])
    adcOut = ((r[1]&3) << 8) + r[2]
    adcOut = TPattern.format(adcOut)
    if adcOut > 10:
        return adcOut
    else:
        return 0

def updateTemp():
    global outstring, timer
    outstring = str(timer)+ "  " + str(temperature1())+"   "\
                +str(temperature2())+"   "+ str(temperature3())+"   "\
                +str(temperature4())+"   "+str(temperature5())+"   "\
                +str(temperature6())+"\n"
    timeTemp.configure(text=outstring)
    root.after(1000, updateTemp) #Timer speed: 10 = 10 milliseconds (100 should equal 1 sec)

def handleInput(event):
    key = 1
    if event.keysym =='1':
        key = 1
    if key != 0:
        lightStatus[0] = toggle(lightStatus[0])
        canvas1.itemconfig(light[0], fill = LIGHTONOFF[lightStatus[0]])

def ledON():
    if GPIO.input(4): #if GPIO 4 == 1
        GPIO.output(4,GPIO.LOW)
        print GPIO.input(4)
        lightStatus[0] = toggle(lightStatus[0])
        canvas1.itemconfig(light[0], fill = LIGHTONOFF[lightStatus[0]])

    elif GPIO.input(4) == 0:
        GPIO.output(4,GPIO.HIGH)
        print GPIO.input(4)
        lightStatus[0] = toggle(lightStatus[0])
        canvas1.itemconfig(light[0], fill = LIGHTONOFF[lightStatus[0]])

def ledON1():
    if GPIO.input(17):  #if GPIO 17 == 1
        GPIO.output(17,GPIO.LOW)
        print GPIO.input(17)
        lightStatus[1] = toggle(lightStatus[1])
        canvas2.itemconfig(light[1], fill = LIGHTONOFF[lightStatus[1]])

    elif GPIO.input(17) == 0:
        GPIO.output(17,GPIO.HIGH)
        print GPIO.input(17)
        lightStatus[1] = toggle(lightStatus[1])
        canvas2.itemconfig(light[1], fill = LIGHTONOFF[lightStatus[1]])

def ledON2():
    if GPIO.input(27):  #if GPIO 27 == 1
        GPIO.output(27,GPIO.LOW)
        print GPIO.input(27)
        lightStatus[2] = toggle(lightStatus[2])
        canvas3.itemconfig(light[2], fill = LIGHTONOFF[lightStatus[2]])

    elif GPIO.input(27) == 0:
        GPIO.output(27,GPIO.HIGH)
        print GPIO.input(27)
        lightStatus[2] = toggle(lightStatus[2])
        canvas3.itemconfig(light[2], fill = LIGHTONOFF[lightStatus[2]])

def ledON3():
    if GPIO.input(22):  #if GPIO 22 == 1
        GPIO.output(22,GPIO.LOW)
        print GPIO.input(22)
        lightStatus[3] = toggle(lightStatus[3])
        canvas4.itemconfig(light[3], fill = LIGHTONOFF[lightStatus[3]])

    elif GPIO.input(22) == 0:
        GPIO.output(22,GPIO.HIGH)
        print GPIO.input(22)
        lightStatus[3] = toggle(lightStatus[3])
        canvas4.itemconfig(light[3], fill = LIGHTONOFF[lightStatus[3]])
        
def toggle(value):
    if value == ON:
        value = OFF
    else:
        value = ON
    return value

def start():
    global state, outstring
    state = True
    f = open('Tempdate.txt','a')
    now = datetime.datetime.now()
    timestamp = now.strftime("%Y/%m/%d %H:%M")
    outStamp = str(timestamp) + "\n" + "TC1   TC2   TC3   TC4   TC5   TC6" + "\n"
    print outStamp
    f.write(outStamp)
    f.close()

def record():
    global outstring
    if(state):
        f = open('Tempdate.txt','a')
        print outstring
        f.write(outstring)
        f.close()
    root.after(10, record) # Timer speed: 10 = 10 milliseconds

def pause():
    global state
    state = False

def reset():
    global timer
    timer = [0,0,0]
    timeText.configure(text = '00:00:00')

def exitProgram():
    print("Exit Button Pressed")
    GPIO.cleanup()
    root.quit() #Stops program (freezes)
    root.destroy() #Closes window

#solenoid indicators
canvas1 = Canvas(root, width = WINDOW_W, height = WINDOW_H, background = BLACK)
canvas1.grid(column = 3, row = 1)
for i in range(0,1):
    x = MARGIN+((MARGIN+BUTTON_SIZE)*i)
    light.append(canvas1.create_rectangle(x, MARGIN, x+BUTTON_SIZE, BUTTON_SIZE+MARGIN, fill = RED))

canvas2 = Canvas(root, width = WINDOW_W, height = WINDOW_H, background = BLACK)
canvas2.grid(column = 4, row = 1)
for i in range(0,1):
    x = MARGIN+((MARGIN+BUTTON_SIZE)*i)
    light.append(canvas2.create_rectangle(x, MARGIN, x+BUTTON_SIZE, BUTTON_SIZE+MARGIN, fill = RED))

canvas3 = Canvas(root, width = WINDOW_W, height = WINDOW_H, background = BLACK)
canvas3.grid(column = 5, row = 1)
for i in range(0,1):
    x = MARGIN+((MARGIN+BUTTON_SIZE)*i)
    light.append(canvas3.create_rectangle(x, MARGIN, x+BUTTON_SIZE, BUTTON_SIZE+MARGIN, fill = RED))

canvas4 = Canvas(root, width = WINDOW_W, height = WINDOW_H, background = BLACK)
canvas4.grid(column = 6, row = 1)
for i in range(0,1):
    x = MARGIN+((MARGIN+BUTTON_SIZE)*i)
    light.append(canvas4.create_rectangle(x, MARGIN, x+BUTTON_SIZE, BUTTON_SIZE+MARGIN, fill = RED))
            
root.bind_all('<KeyPress-1>', handleInput)

def update1(angle):
    duty = float(angle)/10.0 + 2.5
    pwm1.ChangeDutyCycle(duty)

def update2(angle):
    duty = float(angle)/10.0 + 2.5
    pwm2.ChangeDutyCycle(duty)
        
#ledButton = Button(root, text = "LED ON", command = ledON, height = 2, width = 8)
timeText = tk.Label(root, text = "00:00:00", font=50)
timeText.grid(row = 0, column = 0)

TempLabel = tk.Label(root, text = "TC1   TC2   TC3   TC4   TC5   TC6",)
TempLabel.grid(row = 1, column = 0)

timeTemp = tk.Label(root,  text =  '00:00:00   000   000   000   000   000   000')
timeTemp.grid(column = 0)

#Servo Slider1
scale = Scale(root, label = "Fuel - Servo 1", from_=20, to=210, length=150, resolution = 0.1, orient=HORIZONTAL, command=update1, activebackground = GREEN)
scale.grid(row=1, column = 7)

#Servo Slider2
scale = Scale(root, label = "Oxidizer - Servo 2", from_=20, to=165, length=150, orient=HORIZONTAL, command=update2, activebackground = GREEN)
scale.grid(row=2, column = 7)

#Solenoid 1
button1 = Button(root, text = "Sol 1" , command = ledON)
button1.grid(row = 2, column = 3)

#Solenoid 2
button2 = Button(root, text = "Sol 2", command = ledON1)
button2.grid(row = 2, column = 4)

#Solenoid 3
button3 = Button(root, text = "Sol 3" , command = ledON2)
button3.grid(row = 2, column = 5)

#Solenoid 4
button4 = Button(root, text = "Sol 4", command = ledON3)
button4.grid(row = 2, column = 6)

startButton = tk.Button(root, text ='Start Record', command = start, width = 10)
startButton.grid(row=3, column = 0)

pauseButton = tk.Button(root, text = 'Pause', command = pause, width = 10)
pauseButton.grid(row=4, column = 0)

resetButton = tk.Button(root, text ='Reset', command = reset, width = 10)
resetButton.grid(row=5, column = 0)

exitbtn = Button(root, text = "Exit", command = exitProgram, width = 10)
exitbtn.grid(row=6, column = 0)

temperature1()
temperature2()
temperature3()
temperature4()
temperature5()
temperature6()
updateTemp()
root.wm_title('Servo Control') #wm = window manager: can use "title" or "wm_title"
Time()
record()
root.geometry("1000x500+0+0")
root.mainloop()
